<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Batch Data Visualization</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/js/all.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/styles.css">
    <style>
        .container {
            background: #f9f9f9;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            max-width: 1200px;
            margin: auto;
            color: #333;
        }
        
        .chart-container {
            width: 100%;
            margin: 20px auto;
            padding: 20px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }
        
        .batch-info {
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid #eee;
        }
        
        .time-filter-btn {
            background-color: #4361ee;
            color: white;
            border: none;
            padding: 8px 15px;
            margin: 0 5px;
            border-radius: 5px;
            transition: all 0.3s;
        }
        
        .time-filter-btn:hover, .time-filter-btn.active {
            background-color: #3a56d4;
            transform: translateY(-2px);
        }
        
        .search-controls {
            background: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            .search-controls .col-md-4 {
                margin-bottom: 10px;
            }
        }
    </style>
</head>
<body>
    <!-- Your existing header and sidebar -->
    <div class="header">
        <!-- Query Action Button -->
        <div class="query-action">
            <button class="btn btn-info" onclick="toggleSidebar()">Query Action</button>
        </div>
        <!-- Logo -->
        <div class="logo">
            <i class="bi bi-egg"></i> Layers
        </div>
        <!-- User Info and Logout -->
        <div>
            <span id="currentUser">Hello, User</span>
            <button class="btn btn-danger btn-sm" onclick="logout()">Logout</button>
        </div>
    </div>
    
    <!-- Sidebar -->
    <div id="querySidebar" class="query-sidebar">
        <ul>
            <li><a href="/dashboard"><i class="fas fa-home"></i> Home</a></li>
            <li><a href="/batch"><i class="fas fa-plus-circle"></i> Add Flock</a></li>
            <li><a href="/egg-production"><i class="fas fa-egg"></i> Record Egg Production</a></li>
            <li><a href="/financials"><i class="fas fa-dollar-sign"></i> Financials</a></li>
            <li><a href="/trial-balance"><i class="fas fa-cog"></i> Trial Balance</a></li>
            <li><a href="/balance-sheet"><i class="fas fa-download"></i> Balance Sheet Report</a></li>
            <li><a href="/supplier-payments"><i class="fas fa-exchange-alt"></i> Reconciliation</a></li>
            <li><a href="/visualization"><i class="fas fa-chart-line"></i> Visualization</a></li>
            <li><a href="/report"><i class="fas fa-file-alt"></i> Report</a></li>
            <li><a href="/record-death"><i class="fas fa-skull-crossbones"></i> Record Death</a></li>
        </ul>
    </div>

    <div class="container">
        <h2 class="text-center mb-4">Egg Production & Financial Dashboard</h2>
        
        <!-- Enhanced Search and Filter Controls -->
        <div class="search-controls">
            <div class="row g-3">
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-filter"></i></span>
                        <select id="batchSelect" class="form-select">
                            <% if (batches.length > 0) { %>
                                <% batches.forEach(batch => { %>
                                    <option value="<%= batch._id %>" 
                                        <%= selectedBatch && batch._id.equals(selectedBatch._id) ? 'selected' : '' %>>
                                        <%= batch.batchNo %>
                                    </option>
                                <% }) %>
                            <% } else { %>
                                <option>No batches found</option>
                            <% } %>
                        </select>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-calendar"></i></span>
                        <select id="dateFilter" class="form-select">
                            <option value="all">All Dates</option>
                            <option value="today">Today</option>
                            <option value="week">This Week</option>
                            <option value="month">This Month</option>
                            <option value="year">This Year</option>
                            <option value="custom">Custom Range</option>
                        </select>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="input-group">
                        <input type="text" id="dataSearch" class="form-control" placeholder="Search records...">
                        <button class="btn btn-primary" type="button" id="searchBtn">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <% if (selectedBatch) { %>
            <!-- Batch Information -->
            <div class="batch-info">
                <div class="row">
                    <div class="col-md-3">
                        <div class="info-item">
                            <strong>Batch No:</strong> <%= selectedBatch.batchNo %>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="info-item">
                            <strong>Grade:</strong> <%= selectedBatch.grade %>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="info-item">
                            <strong>Total Birds:</strong> <%= selectedBatch.totalNumber %>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="info-item">
                            <strong>Age (days):</strong> <%= selectedBatch.age %>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Time Period Selector -->
            
            <!-- Egg Production Chart -->
            <div class="chart-container">
                <h3>Egg Production Trend</h3>
                <canvas id="eggChart"></canvas>
            </div>

            <!-- Financial Chart -->
            <div class="chart-container">
                <h3>Financial Performance</h3>
                <canvas id="financialChart"></canvas>
            </div>
        <% } else { %>
            <div class="alert alert-info text-center">
                Please select a batch to view visualization
            </div>
        <% } %>
    </div>

    <script>
        // Initialize charts
        let eggChart, financialChart;
        let currentTimeFilter = 'month';
        
        <% if (selectedBatch) { %>
            // Prepare data from server
            const eggData = {
                labels: <%- JSON.stringify(eggGraph.map(e => e.date)) %>,
                data: <%- JSON.stringify(eggGraph.map(e => e.totalEggs)) %>
            };

            const financialData = {
                labels: <%- JSON.stringify(financialGraph.map(f => f.date)) %>,
                profit: <%- JSON.stringify(financialGraph.map(f => f.profit)) %>,
                income: <%- JSON.stringify(financialGraph.map(f => f.totalIncome)) %>,
                expenses: <%- JSON.stringify(financialGraph.map(f => f.totalExpenses)) %>
            };

            // Create Egg Production Chart
            const eggCtx = document.getElementById('eggChart').getContext('2d');
            eggChart = new Chart(eggCtx, {
                type: 'line',
                data: {
                    labels: eggData.labels,
                    datasets: [{
                        label: 'Eggs Produced',
                        data: eggData.data,
                        borderColor: '#4361ee',
                        backgroundColor: 'rgba(67, 97, 238, 0.1)',
                        borderWidth: 2,
                        pointRadius: 4,
                        pointBackgroundColor: '#4361ee',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `${context.dataset.label}: ${context.raw.toLocaleString()}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: { 
                            grid: { display: false }
                        },
                        y: { 
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });

            // Create Financial Chart
            const financialCtx = document.getElementById('financialChart').getContext('2d');
            financialChart = new Chart(financialCtx, {
                type: 'bar',
                data: {
                    labels: financialData.labels,
                    datasets: [
                        {
                            label: 'Profit',
                            data: financialData.profit,
                            backgroundColor: function(context) {
                                return context.raw >= 0 ? 'rgba(40, 167, 69, 0.7)' : 'rgba(220, 53, 69, 0.7)';
                            },
                            borderColor: function(context) {
                                return context.raw >= 0 ? '#28a745' : '#dc3545';
                            },
                            borderWidth: 1,
                            borderRadius: 3
                        },
                        {
                            label: 'Income',
                            data: financialData.income,
                            borderColor: '#007bff',
                            backgroundColor: 'transparent',
                            borderWidth: 2,
                            type: 'line',
                            pointRadius: 4
                        },
                        {
                            label: 'Expenses',
                            data: financialData.expenses,
                            borderColor: '#6c757d',
                            backgroundColor: 'transparent',
                            borderWidth: 2,
                            type: 'line',
                            pointRadius: 4,
                            borderDash: [5, 5]
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `${context.dataset.label}: ${context.raw.toLocaleString()}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: { 
                            grid: { display: false }
                        },
                        y: { 
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
        <% } %>

        function updateTimeFilter(period) {
            currentTimeFilter = period;
            document.querySelectorAll('.time-filter-btn').forEach(btn => {
                btn.classList.toggle('active', btn.textContent.toLowerCase().includes(period));
            });
            
            // In a real implementation, you would fetch new data here
            // For now, we'll just update the existing charts
            if (eggChart) eggChart.update();
            if (financialChart) financialChart.update();
            
            // Example of how you might implement this with actual data fetching:
            // fetch(`/visualization/data?batchId=${currentBatchId}&period=${period}`)
            //     .then(response => response.json())
            //     .then(data => {
            //         updateChartData(data);
            //     });
        }

        // Batch selector redirect
        document.getElementById('batchSelect').addEventListener('change', function() {
            const batchId = this.value;
            if (batchId) {
                window.location.href = `/visualization?batchId=${batchId}&period=${currentTimeFilter}`;
            }
        });

        // Date filter handler
        document.getElementById('dateFilter').addEventListener('change', function() {
            if (this.value === 'custom') {
                // You would implement a custom date range picker here
                alert('Custom date range selection would be implemented here');
            } else {
                // Apply the selected date filter
                // In a real implementation, you would fetch filtered data
                if (eggChart) eggChart.update();
                if (financialChart) financialChart.update();
            }
        });

        // Search functionality
        document.getElementById('searchBtn').addEventListener('click', function() {
            const searchTerm = document.getElementById('dataSearch').value.toLowerCase();
            // Implement your search logic here
            console.log('Searching for:', searchTerm);
            // This would typically filter the displayed data or fetch new data from the server
        });

        // Initialize with month filter active
        if (document.querySelector('.time-filter-btn')) {
            document.querySelector('.time-filter-btn').classList.add('active');
        }







         
        function toggleSidebar() {
    const sidebar = document.getElementById('querySidebar');
    const overlay = document.getElementById('overlay');
    sidebar.classList.toggle('open');
    overlay.classList.toggle('active');
}






 // for report scrolling arrow 
 document.addEventListener('DOMContentLoaded', function() {
    const tableContainer = document.querySelector('.table-container');
    const tableWrapper = document.querySelector('.table-wrapper');
    const leftButton = document.querySelector('.scroll-button.left');
    const rightButton = document.querySelector('.scroll-button.right');
    
    // Check if elements exist (for pages without the table)
    if (!tableContainer) return;
    
    // Update button states based on scroll position
    function updateButtonStates() {
        const scrollLeft = tableWrapper.scrollLeft;
        const maxScroll = tableWrapper.scrollWidth - tableWrapper.clientWidth;
        
        leftButton.disabled = scrollLeft <= 0;
        rightButton.disabled = scrollLeft >= maxScroll - 1; // -1 to account for rounding
    }
    
    // Scroll left
    leftButton.addEventListener('click', function() {
        tableWrapper.scrollBy({
            left: -200,
            behavior: 'smooth'
        });
    });
    
    // Scroll right
    rightButton.addEventListener('click', function() {
        tableWrapper.scrollBy({
            left: 200,
            behavior: 'smooth'
        });
    });
    
    // Update on scroll
    tableWrapper.addEventListener('scroll', updateButtonStates);
    
    // Initial check
    updateButtonStates();
    
    // Update on window resize
    window.addEventListener('resize', updateButtonStates);
});





    </script>
</body>
</html>